{"ast":null,"code":"import 'dotenv';\nimport fetch from 'isomorphic-unfetch';\nexport default {\n  name: 'YouTube',\n  search: async query => {\n    const res = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&key=${encodeURIComponent(process.env.YOUTUBE_API_KEY)}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    const json = await res.json();\n    return json.items.map(item => ({\n      name: item.snippet.title,\n      description: item.snippet.description,\n      tags: query.split(' '),\n      uploadDate: new Date(),\n      url: 'https://example.com/',\n      image: item.snippet.thumbnails.default.url\n    }));\n  }\n};","map":{"version":3,"sources":["/home/runner/vidregator-1/sites/youtube.js"],"names":["fetch","name","search","query","res","encodeURIComponent","process","env","YOUTUBE_API_KEY","headers","json","items","map","item","snippet","title","description","tags","split","uploadDate","Date","url","image","thumbnails","default"],"mappings":"AAAA,OAAO,QAAP;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,SADO;AAEbC,EAAAA,MAAM,EAAE,MAAOC,KAAP,IAAiB;AACvB,UAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,+DAA8DK,kBAAkB,CAACF,KAAD,CAAQ,QAAOE,kBAAkB,CAACC,OAAO,CAACC,GAAR,CAAYC,eAAb,CAA8B,EAAjJ,EAAoJ;AACzKC,MAAAA,OAAO,EAAE;AAAG,kBAAU;AAAb;AADgK,KAApJ,CAAvB;AAGA,UAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;AACA,WAAOA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAgBC,IAAD,KAAW;AAC/BZ,MAAAA,IAAI,EAAEY,IAAI,CAACC,OAAL,CAAaC,KADY;AAE/BC,MAAAA,WAAW,EAAEH,IAAI,CAACC,OAAL,CAAaE,WAFK;AAG/BC,MAAAA,IAAI,EAAEd,KAAK,CAACe,KAAN,CAAY,GAAZ,CAHyB;AAI/BC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,EAJmB;AAK/BC,MAAAA,GAAG,EAAE,sBAL0B;AAM/BC,MAAAA,KAAK,EAAET,IAAI,CAACC,OAAL,CAAaS,UAAb,CAAwBC,OAAxB,CAAgCH;AANR,KAAX,CAAf,CAAP;AAQD;AAfY,CAAf","sourcesContent":["import 'dotenv'\nimport fetch from 'isomorphic-unfetch'\n\nexport default {\n  name: 'YouTube',\n  search: async (query) => {\n    const res = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&key=${encodeURIComponent(process.env.YOUTUBE_API_KEY)}`, {\n      headers: {  'Accept': 'application/json' }\n    })\n    const json = await res.json()\n    return json.items.map((item) => ({\n      name: item.snippet.title,\n      description: item.snippet.description,\n      tags: query.split(' '),\n      uploadDate: new Date(),\n      url: 'https://example.com/',\n      image: item.snippet.thumbnails.default.url\n    }))\n  }\n}"]},"metadata":{},"sourceType":"module"}