{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport default (function _callee(query) {\n  var res;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"/api/search/\".concat(encodeURIComponent(query))));\n\n        case 2:\n          res = _context.sent;\n          console.log(\"searching for \".concat(query));\n\n          if (!res.ok) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 7:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 10:\n          _context.t0 = Error;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 13:\n          _context.t1 = _context.sent;\n          throw new _context.t0(_context.t1);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/home/runner/vidregator/lib/apiSearch.js"],"names":["fetch","query","encodeURIComponent","res","console","log","ok","json","Error","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,gBAAe,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACKD,KAAK,uBAAgBE,kBAAkB,CAACD,KAAD,CAAlC,EADV;;AAAA;AACPE,UAAAA,GADO;AAEbC,UAAAA,OAAO,CAACC,GAAR,yBAA6BJ,KAA7B;;AAFa,eAGTE,GAAG,CAACG,EAHK;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIEH,GAAG,CAACI,IAAJ,EAJF;;AAAA;AAAA;;AAAA;AAAA,wBAMDC,KANC;AAAA;AAAA,2CAMWL,GAAG,CAACM,IAAJ,EANX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nexport default async (query) => {\n  const res = await fetch(`/api/search/${encodeURIComponent(query)}`)\n  console.log(`searching for ${query}`)\n  if (res.ok) {\n    return await res.json()\n  } else {\n    throw new Error(await res.text())\n  }\n}"]},"metadata":{},"sourceType":"module"}