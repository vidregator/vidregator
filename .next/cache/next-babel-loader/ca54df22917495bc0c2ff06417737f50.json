{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/runner/vidregator-1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport useSWR from 'swr';\nimport { useDebounce } from 'use-debounce';\nimport Global from '../components/Global';\nimport SearchBox from '../components/SearchBox';\nimport VideoSection from '../components/VideoSection';\nimport Stack from '../components/Stack';\nimport apiSearch from '../lib/apiSearch';\nexport default (function () {\n  var _useState = useState(''),\n      query = _useState[0],\n      setQuery = _useState[1];\n\n  var _useDebounce = useDebounce(text, 1000),\n      _useDebounce2 = _slicedToArray(_useDebounce, 1),\n      value = _useDebounce2[0];\n\n  var _useSWR = useSWR(query, apiSearch),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(Global, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), __jsx(Stack, {\n    space: 48,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(SearchBox, {\n    value: query,\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    placeholder: \"Search for anything...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), query.trim() && (error ? 'Error!' : data ? data.map(function (site) {\n    return __jsx(VideoSection, {\n      name: site.name,\n      videos: site.results,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }) : 'Loading...')));\n});","map":{"version":3,"sources":["/home/runner/vidregator-1/pages/index.js"],"names":["useState","useSWR","useDebounce","Global","SearchBox","VideoSection","Stack","apiSearch","query","setQuery","text","value","data","error","e","target","trim","map","site","name","results"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,gBAAe,YAAM;AAAA,kBACSP,QAAQ,CAAC,EAAD,CADjB;AAAA,MACXQ,KADW;AAAA,MACJC,QADI;;AAAA,qBAEHP,WAAW,CAACQ,IAAD,EAAO,IAAP,CAFR;AAAA;AAAA,MAEZC,KAFY;;AAAA,gBAGKV,MAAM,CAACO,KAAD,EAAQD,SAAR,CAHX;AAAA,MAGXK,IAHW,WAGXA,IAHW;AAAA,MAGLC,KAHK,WAGLA,KAHK;;AAKnB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,KAAK,EAAEL,KADT;AAEE,IAAA,QAAQ,EAAE,kBAACM,CAAD;AAAA,aAAOL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAf;AAAA,KAFZ;AAGE,IAAA,WAAW,EAAC,wBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGH,KAAK,CAACQ,IAAN,OAAiBH,KAAK,GAAG,QAAH,GAAcD,IAAI,GACvCA,IAAI,CAACK,GAAL,CAAS,UAACC,IAAD;AAAA,WACP,MAAC,YAAD;AACE,MAAA,IAAI,EAAEA,IAAI,CAACC,IADb;AAEE,MAAA,MAAM,EAAED,IAAI,CAACE,OAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO;AAAA,GAAT,CADuC,GAOrC,YAPH,CAPH,CAHF,CADF;AAsBD,CA3BD","sourcesContent":["import { useState } from 'react'\nimport useSWR from 'swr'\nimport { useDebounce } from 'use-debounce'\nimport Global from '../components/Global'\nimport SearchBox from '../components/SearchBox'\nimport VideoSection from '../components/VideoSection'\nimport Stack from '../components/Stack'\nimport apiSearch from '../lib/apiSearch'\n\nexport default () => {\n  const [ query, setQuery ] = useState('')\n  const [value] = useDebounce(text, 1000);\n  const { data, error } = useSWR(query, apiSearch)\n\n  return (\n    <div>\n      <Global />\n\n      <Stack space={48}>\n        <SearchBox\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder='Search for anything...'\n        />\n\n        {query.trim() && (error ? 'Error!' : data ? (\n          data.map((site) => (\n            <VideoSection\n              name={site.name}\n              videos={site.results}\n            />\n          ))\n        ) : 'Loading...')}\n      </Stack>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}